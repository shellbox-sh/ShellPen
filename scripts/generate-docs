#! /usr/bin/env bash

# Hand-write this for manual sorting:
DSL_COMMANDS=(
'$'
':'
'::'
'['
'[['
'{{'
'}'
'appendln'
'append'
'array'
'case'
'cleanSlate'
'code'
'comment'
'declare'
'done'
'do'
'echo'
'elif'
'else'
'esac'
'fi'
'fn'
'for'
'fromCommand'
'fromFile'
'fromStdin'
'fromText'
'if'
'int'
'local'
'map'
'option'
'printf'
'putAway'
'return'
'shift'
'then'
'toFile'
'toStderr'
'unset'
'var'
'while'
'writeln'
'write'
)

./scripts/compile

source vendor/docgen.sh
source vendor/shx.sh

if [ "$1" = "--tree" ]
then
  shift
  tree="$1"
  mkdir -p "$tree"
  shift
else
  tree="$( mktemp -d )"
fi

docgen parseTree setRoot "$tree"

if [ "$1" = "--parse" ]
then
  shift
  [ -d "$tree" ] && rm -r "$tree"
  mkdir -p "$tree"
  docgen parseToTree src/
else
  [ -d "$tree" ] || { echo "Tree not found '$tree' - try calling with --tree [tree] --parse to create new" >&2; exit 1; }
fi

context() { docgen context "$@"; }
command() { docgen context commands "$@"; }

docgen context create new

# if [ "$1" = "--examples" ]
# then
#   shift
#   ./scripts/generate-examples --tree "$tree"
# fi

[ "$1" = "-x" ] && exit 0

if [ "$1" = "--recurse" ]
then
  recurse=true
  shift
fi

if [ "$1" = "--tree" ]
then
  shift
  if [ "$1" = "--all" ]
  then
    shift
    tree -a "$tree"
  else
    tree "$tree"
  fi
fi

# 1. Generate /docs which has a reference of every command with a short description in a table
echo "Generating docs.md"
shx render docs/_templates/docs.shx.md > docs/_pages/docs.md

# 2. Generate each of the command pages
[ -d docs/_pages/commands ] && rm -r docs/_pages/commands
mkdir -p docs/_pages/commands
commandName=''
for commandName in "${DSL_COMMANDS[@]}"
do
  pageName="$commandName"
  [ "$pageName" = ':' ] && pageName='colon'
  [ "$pageName" = '::' ] && pageName='colon-colon'
  context goto path "@commands/DSL/$commandName"
  echo "Generating $commandName.md"
  shx render docs/_templates/individual_command.shx.md > "docs/_pages/commands/$pageName.md"
done

echo "Done."