#! /usr/bin/env bash

./scripts/compile

source vendor/docgen.sh
source vendor/shx.sh

generateREADME() {
  cp docs/_templates/readmeHeader.md README.md
  cat docs/_templates/index.md >> README.md
}

generateWebsiteIndex() {
  cp docs/_templates/websiteHeader.md docs/index.md
  cat docs/_templates/index.md | sed "s|(https://shellpen.sh|(|g" >> docs/index.md
  echo >> docs/index.md
  echo '{% endraw %}' >> docs/index.md
}

TEMPLATE=docs/_templates/command_reference.shx.md
API_ROOT=api

if [ "$1" = "--tree" ]
then
  shift
  tree="$1"
  shift
else
  tree="$( mktemp -d )"
fi

docgen parseTree setRoot "$tree"

if [ "$1" = "--parse" ]
then
  shift
  [ -d "$tree" ] && rm -r "$tree"
  mkdir -p "$tree"
  docgen parseToTree src/
else
  [ -d "$tree" ] || { echo "Tree not found '$tree' - try calling with --tree [tree] --parse to create new" >&2; exit 1; }
fi

context() { docgen context "$@"; }
command() { docgen context commands "$@"; }

docgen context create new

generateREADME
generateWebsiteIndex

# if [ "$1" = "--examples" ]
# then
#   shift
#   ./scripts/generate-examples --tree "$tree"
# fi

[ "$1" = "-x" ] && exit 0

if [ "$1" = "--recurse" ]
then
  recurse=true
  shift
fi

if [ "$1" = "--tree" ]
then
  shift
  if [ "$1" = "--all" ]
  then
    shift
    tree -a "$tree"
  else
    tree "$tree"
  fi
fi

[ $# -eq 0 ] && { echo "Please provide @command paths to generate Markdown files for" >&2; exit 1; }

writeMarkdownFile() {
  local markdownFile="docs/${1/#"@commands"/"$API_ROOT"}.md"

  mkdir -p "${markdownFile%/*}"

  [ "${markdownFile##*/}" = ':.md' ] && markdownFile="${markdownFile/%:.md/colon.md}"

  shx render "$TEMPLATE" > "$markdownFile"
}

writeMarkdownFiles() {
  local commandPath="$1"

  echo "writeMarkdownFiles $commandPath"

  docgen context goto path "$commandPath"

  echo "$( writeMarkdownFile "$commandPath" )"

  if [ "$recurse" = true ]
  then
    declare -a commandPaths=()
    if docgen context commands list commandPaths
    then
      commandPath=''
      for commandPath in "${commandPaths[@]}"
      do
        echo "$( writeMarkdownFiles "$commandPath" )"
      done
    fi
  fi
}

for arg in "$@"
do
  writeMarkdownFiles "@commands/$arg"
done

[ -f docs/_.md ] && mv docs/_.md docs/docs.md
[ -d docs/_ ] && mv docs/_/* docs/ && rm -r docs/_